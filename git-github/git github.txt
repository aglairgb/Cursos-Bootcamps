git e github

<<CONCEITO>>

git => software de versionamento de código, que ajuda a alterar/manitorar diferentes versõoes do nosso código dentro de nossa máquina.

github => repositório online do git.

- controle de versão
- armazenamento em nuvem
- trabalho em equipe
- melhorar seu código
- reconhecimento

<<NAVEGAÇÃO BÁSICA TERMINAL>>

GUI - Graphical user interface -> depende de interface grafica, como arrastar elementos, criar pastas, desligar o pc e etc... de forma interativa, como clicar um botão.

CLI - Interface de linha de comandos - Tudo feito sem interface gráfica, a partir dos comandos.. desde criar uma pasta, remover ou desligar o pc, usa-se o terminal ou bash para executar as funções.


no terminal:
- mudar pastas 
- listar pastas
- criar pastas/arquivos
- deletar pastas/arquivos


windows
-cd                   abrir pasta
-dir                  listar diretórios
-mkdir/md             criar pastas
-del/rmdir             excluir pastas
del = exclui arquivos, esvazia pastas (somente arquiivos) 
rmdir = exclui diretórios
cls= limpar

rmdir -> só apaga pastas vazias	

unix:
-cd
-ls
-mkdir
      rm-rf  (apaga pasta com todo conteúdo dentro ou pasta vazia ou arquivo fodase)
      rm (apaga arquivo)

ctrl + l / clear


cd / => volta para o diretório principal
cd .. volta um nível


echo (printa na tela o que vc por a seguir)
exemplo:
echo hello
hello


para criar arquivos de texto (.txt) usa-se 
echo > exemplo.txt

copiar e colar

copy c:\exemplo.txt e:

comando acima, o arquivo está no disco c e irá para o disco e:

copy *.txt e:

comando acima, copia todos os arquivos .txt do disco c:\ para o disco e:\

xcopy c:\exemplo e:

comando aima, copia todos os arquivos do diretório exemplo para o disco e:\

xcopy c:\teste d:\teste /e /h /c /i

/e copia todos os subdiretórios, incluindo pastas que estão vazias
/h copia arquivos que são ocultos e tem atributos de arquivo de sistema
/c se ocorrer erro, continue copiando
/i sempre presuma que o destino é uma pasta, se tiver em dúvida

attrib (mostra arquivos ocultos)
attrib /d mostra pastas e arquivos ocultos
cat = abre arquivos ocultos no terminal

tem outras variações q não sei definir, mas caso um dia precise ta aqui:

attrib -h -r -s /s /d C:\*-*      C é a unidade do dispositivo 

del = apaga arquivos
rmdir = apaga diretórios vazios


rmdir = apaga pastas vazias
del = apaga arquivos
rmdir S/ Q/ (Apaga diretório e todos os arquivos nele)  flags


SHA1

A sigla SHA significa Secure Hash Algorithm (Algortimo de Hash Seguro), é um conjunto de funções hash criptografadas projetadas pela NSA (agência de segurança nacional dos eua).


A encriptação gera conjunto de characteres indentificador de 40 dígitos. Este conjunto é único e serve como identificação.

Em um bloco de notas, por exemplo, possuo o sha1 dele, caso eu mude uma vírgula qualquer, o seu sha1 já é alterado.
sha1 compõe um conjunto de 40 dígitos que pertence ao um algoritimo (arquivos), esse sha1 é um identificador pois é único, qualquer alteração muda sua composição por isso ser seguro.

forma culta de representar um arquivo.

Identificação segura, rápida usada pelo git.


openssl sha1 exemplo.txt
(aqui vai mostrar os 40 dígitos que representam o arquivo)


OBJETOS INTERNOS DO GIT

Blobs, trees, commits > três tipos báscos do git responsáveis pelo versioamento do código.

versionamentos = versões de um código.

blobs = contém metadados do git = tamanho do objeto, tamanho do arquivo..
tree = armazenam blobs = armazena toda estrutura dos arquivos
commit= dá nome ao conjunto de novas alterações


chave ssh = forma de estabelecer conexão segura e encriptada entre duas máquinas. 
(no caso, servidor local com o da nuvem)

git init   > iniciar o repositório do git
git add    > mover arquivos
git commit 

ls -a    = pasta oculta

<<primeira config commit>>
git config --global user.email "aglairgb@hotmail.com"

git config --global user.name vittorya


<< MARKDOWN >>

#    H1
##   H2
###  H3

**exemplo**    negrito (br)
_exemplo_      itálico 
 -  lista nao ordenada


git add * 
git commit -m "commit inicial"


untracked = git não possui conhecimento dele
tracked = git possui conhecimento dele
unmodified = não sofreu alterações
modified = teve alterações
staged = a espera de um aconteciento/ em preparações
commit = junta as alteraçoes e nomeia 
commit retorna para modified, voltam para "novas modificações"

unmodified -> modifie -> staged

commit - modified
commit - staged - modified

git status = monitora posição dos arquivos

mv = move arquivo

git add = adiciona
git rm = retira 

git add *      pega todas as modificações

git config --list   => lista de todas as configurações

modificar user.name or user.email
git config --global --unset user.name
git config --global --unset user.email


<<transferir para github>>

git remote add origin "link"
git push origin master

<<vai pedir senha>>

<puxa todas as alterações do github>
git pull origin master

ls -a mostra repositórios ocultos

git remote -v  (mostra repositórios baixados)

<<renomear commit>>

git log 

git commit --amend 















